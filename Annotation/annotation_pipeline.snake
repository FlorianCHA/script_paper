import glob
import re
import sys
from os.path import join


###############################################################################
###############################################################################
# Adapt here so you can get all read pairs and ref:
#--------------------------------------------------
configfile: 'SupplementaryFile/config.json'
# directory contained fasta files
data_directory=config["datadir"]

# Out directory
output_directory = config["OutDir"]

# RNAseq directory
rna_seq_directory=config["RnaSeqDir"]

# file termination
suffixFileR1 = '_R1.fastq.gz'
suffixFileR2 = '_R2.fastq.gz'
suffixFile = '.fasta'

# Identifiant de l'espÃ¨ce
id_souche =config["id_souche"]
################################################################################
################################################################################


################################################################################
# Config file for TOOGLE
configFile = 'SupplementaryFile/tophatMapping.config.txt' # A mettre dans l'outils
# Path to protein annotation file
protRef = config["protRef"]# A mettre dans l'outils
################################################################################
# TODO parseur config pour verif + argparse ?

#################################################################################

log_directory = config["OutDir"] + 'LOGS/'

SAMPLES, = glob_wildcards(data_directory+"{smp}"+suffixFile)
RNA, = glob_wildcards(rna_seq_directory+"{rna}.fq.gz") # Warning, they haven't suffix variable for retrieve all RNAseq but they can retrieve  a file which aren't a RNAseq file
kmere = [20,30,40,50,60,70,80,90]
rule final:
    input:
        fasta = expand( output_directory+'6_final_data/{smp}/', smp = SAMPLES),
        report = output_directory+'7_report/report.html'

rule hisat2_index :
    """
    This rules is used to build index of each reference for launch hisat2 alignement.
    """
    threads : 1
    input :
        reference_fasta = data_directory+"{smp}"+suffixFile
    output :
        new_reference_fasta = output_directory+"0_bam_alignement/0_reference_fasta/{smp}"+suffixFile
    params :
        reference_index_output =  output_directory+"0_bam_alignement/0_reference_fasta/{smp}", # This line is used in command, the tools want a prefix and not the entire file name
        l_mem_free='4G'
    message :
        """
        Function : out_directory
            - Build index for {wildcards.smp} reference
        Input : 
            - Reference : {input.reference_fasta}
        Ouput : 
            - {output.new_reference_fasta}
            - {params.reference_index_output}
        """+ "*" *100
    shell :
        """
        module load bioinfo/hisat2/2.1.0
        cp {input.reference_fasta} {output.new_reference_fasta}
        hisat2-build {output.new_reference_fasta} {params.reference_index_output}
        """

rule hisat2_alignement :
    """
    This rule launch hisat2 for each fasta reference with each RNAseq single-end samples
    """
    threads : 1
    input :
        reference = rules.hisat2_index.output.new_reference_fasta,
        rna_seq = rna_seq_directory+"{rna}.fq.gz"

    output :
        sam =   output_directory+"0_bam_alignement/1_hisat2/{smp}/{rna}/{smp}_{rna}.sam",
        stdout =  output_directory+"0_bam_alignement/1_hisat2/{smp}/{rna}/Summary_alignement.txt"
    params :
        l_mem_free='10G',
        basename = output_directory+"0_bam_alignement/0_reference_fasta/{smp}"
    message :
        """
        Function : 
            - Align {wildcards.rna} on {wildcards.smp} reference
        Input : 
            - Reference : {input.reference}
            - RNAseq : {input.rna_seq}
        Ouput : 
            - sam file : {output.sam}
            - summary alignement : {output.stdout}
        """ + "*" *100
    shell :
        """
        module load bioinfo/hisat2/2.1.0
        hisat2 -x {params.basename} --summary-file {output.stdout} -U {input.rna_seq} -S {output.sam}  
        """

rule samtools :
    """
    This rule used samtools view for change sam file to bam file and samtools sort for sort the bam file
    """
    threads : 1
    input :
        sam_file = rules.hisat2_alignement.output.sam
    output :
        bam = output_directory+"0_bam_alignement/1_hisat2/{smp}/{rna}/{smp}_{rna}.bam",
        sort = output_directory+"0_bam_alignement/1_hisat2/{smp}/{rna}/{smp}_{rna}_sort.bam"
    params :
        l_mem_free='10G'
    message :
        """
        Function : 
            - Create and sort  {wildcards.smp}_{wildcards.rna}_sort.bam
        Input : 
            - sam file : {input.sam_file}
        Ouput : 
            - bam file sorted : {output.sort}
        """ + "*" *100
    shell :
        """
        module load bioinfo/samtools/1.9
        samtools view -b {input.sam_file} > {output.bam}
        samtools sort -o {output.sort} {output.bam}
        """

rule merge_bam :
    """
    This rules merge all bam by reference file 
    """
    threads : 1
    input :
        bam = expand(rules.samtools.output.sort,rna=RNA,smp = "{smp}")
    output :
        all_bam =  output_directory+"0_bam_alignement/2_merge_bam_file/{smp}/{smp}.bam"
    params :
        directory_bam = output_directory+"0_bam_alignement/1_hisat2/{smp}/", # Snakemake won't input file and directory file if the input file is in the directory, so the directory is give in params
        l_mem_free='4G'
    message :
        """
        Function : 
            - Merge all bam for {wildcards.smp} reference
        Input : 
            - bam file : {input.bam}
        Ouput : 
            - bam merge : {output.all_bam}
        """ + "*" *100
    shell :
        """
        module purge
        module load bioinfo/samtools/1.3
        cd {params.directory_bam}
        ls */*_sort.bam > bamList
        samtools merge -f -b bamList -c {output}
        """

rule sort_bam :
    """
    This rules used samtools sort for sort the merged bam file
    """
    threads : 1
    input :
        bam_file = rules.merge_bam.output.all_bam
    output :
        bam_sort = output_directory+"0_bam_alignement/2_merge_bam_file/{smp}/{smp}_sort.bam"
    params :
        l_mem_free='20G'
    message :
        """
        Function : 
            - Sorted the merged bam for {wildcards.smp} reference
        Input : 
            - bam file : {input.bam_file}
        Ouput : 
            - bam merge : {output.bam_sort}
        """ + "*" *100
    shell:
        """
        module purge
        module load bioinfo/picard-tools/2.7.0
        java -jar /usr/local/bioinfo/picard-tools/2.7.0/picard.jar SortSam I={input.bam_file} O={output.bam_sort} SORT_ORDER=coordinate
        """

rule bam2hints :
    """
    This rules convert merged bam file of {wildcards.smp} into a hint file for AUGUSTUS and BRAKER
    """
    threads : 1
    input :
        bam_file_sorted = rules.sort_bam.output.bam_sort
    output :
        hints =  output_directory+"0_bam_alignement/2_merge_bam_file/{smp}/hints_{smp}.raw.bam"
    params :
        l_mem_free='4G'
    message :
        """
        Function : 
            - Convert merged bam file of {wildcards.smp} into a hint file for AUGUSTUS and BRAKER
        Input : 
            - bam file : {input.bam_file_sorted}
        Ouput : 
            - hints file : {output.hints}
        """ + "*" *100
    shell:
        """
        module purge
        module load bioinfo/braker/1.9
        bam2hints --minintronlen=10 --maxintronlen=1000 --maxgaplen=9 --source=M --exonhints --in={input.bam_file_sorted} --out={output.hints}
        """

rule bam2hints_filter :
    """
    This rules filter hint file outcome of bam file
    """
    threads : 1
    input :
        hints = rules.bam2hints.output.hints
    output :
        hints_filtred = output_directory+'2_hints/RNAseq_hints/hints_{smp}.filtered.gff'
    params :
        path = output_directory+"0_bam_alignement/2_merge_bam_file/{smp}/",
        l_mem_free='4G'
    message :
        """
        Function : 
            - Filter hint file outcome of bam file for {wildcards.smp}
        Input : 
            - hints file : {input.hints}
        Ouput : 
            - hints filtred file : {output.hints_filtred}
        """ + "*" *100
    shell:
        """
        script/filterHintsSnake.r -s {wildcards.smp} -p {params.path}/ -o {output.hints_filtred}
        """

rule exonerate :
    """
    This rules execut exonerate alignement and convert alignement into hints fil
    """
    threads : 2
    input :
        protRef = protRef,
        file = rules.hisat2_index.output.new_reference_fasta

    output:
        exonerate = output_directory+'2_hints/ProtHints/exonerate_{smp}.gff3',
        hints = output_directory+'2_hints/ProtHints/exonerate_{smp}.hints.gff3'
    params :
        l_mem_free='20G'
    message :
        """
        Function : 
            - Executing exonerate alignement and convert alignement into hints file for {wildcards.smp}
        Input : 
            - protein reference fasta file : {input.protRef}
        Ouput : 
            - hints : {output.hints}
        """ + "*" *100
    shell:
        """
        module purge
        module load bioinfo/exonerate/2.4.7
        module load bioinfo/braker/1.9
        exonerate --model protein2genome --percent 95 --showtargetgff T {input.protRef} {input.file} > {output.exonerate}
        exonerate2hints.pl --source=M --minintronlen=10 --maxintronlen=1000 --in={output.exonerate} --out={output.hints}
        """


rule merge_hint:
    """
    This rules merge hints outcome of RNAseq with hints outcome of proteine alignement
    """
    threads : 1
    input:
        rnaseq = rules.bam2hints_filter.output.hints_filtred, 
        prot = rules.exonerate.output.hints

    output:
        merge = output_directory+'2_hints/MergeHints/RNAseq_protein.hints_{smp}.gff',
        merge_intron = output_directory+'2_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
    params:
        l_mem_free = '4G'
    message :
        """
        Function : 
            - Merge hints outcome of RNAseq with hints outcome of proteine alignement for {wildcards.smp}.
        Input : 
            - RNAseq hints : {input.rnaseq}
            - protein hints : {input.prot}
        Ouput : 
            - all hints : {output.merge}
            - hints of intron :  {output.merge_intron}
        """ + "*" *100
    shell:
        """
        cat {input.rnaseq} {input.prot}  > {output.merge}
        awk '/intron/' {output.merge} > {output.merge_intron}
        """


rule BRAKER :
    """
    This rules execute BRAKER for annotation
    """
    threads : 2
    input :
        genome =rules.hisat2_index.output.new_reference_fasta,
        hints = rules.merge_hint.output.merge_intron
    output :
        directory = directory(output_directory+'3_Braker/{smp}/')
    params :
        l_mem_free='10G',
        species = id_souche
    message :
        """
        Function : 
            - Execute BRAKER for {wildcards.smp}
        Input : 
            - Genome file : : {input.genome}
            - hints file : {input.hints}
        Ouput : 
            - Directory output : {output.directory}
        """ + "*" *100
    shell :
        """
        module load bioinfo/braker/1.9
        braker.pl --cores 2 --fungus --gff3 --species={params.species} --useexisting --genome={input.genome} --hints={input.hints} --overwrite --alternatives-from-evidence=false --workingdir={output.directory}
        """

rule augustus :
    """
    This rules execute augustus for annotation
    """
    threads : 2
    input :
        hints = rules.merge_hint.output.merge ,
        genome = rules.hisat2_index.output.new_reference_fasta,
    output :
        gff_file = output_directory+'4_Augustus/{smp}.gff3'
    params :
        l_mem_free='4G',
        species = id_souche
    message :
        """
        Function : 
            - Execute augustus for {wildcards.smp}.
        Input : 
            - Genome file : : {input.genome}
            - hints file : {input.hints}
        Ouput : 
            - gff file : {output.gff_file}
        """ + "*" *100
    shell : """
    module purge
    module load bioinfo/augustus/3.3.1
    augustus --hintsfile={input.hints} --species={params.species} {input.genome} --gff3=on --outfile={output.gff_file}
    """

rule merge_gff:
    """
    This rules merge and rename Braker and Augustus output
    """
    threads : 1
    input :
        augustus = rules.augustus.output.gff_file,
        braker = rules.BRAKER.output.directory,
    output :
        merge_gff =  output_directory+'5_merged_gff/{smp}_merge.gff3'
    params :
        l_mem_free='4G',
        species = id_souche
    message :
        """
        Function : 
            - Merge and rename Braker and Augustus output {wildcards.smp}.
        Input : 
            - augustus file : : {input.augustus}
            - braker directory : {input.braker}
        Ouput : 
            - gff file : {output.merge_gff}
        """ + "*" *100
    shell :
         """
        script/mergeBraker_augustus.py  --augustus {input.augustus} --braker {input.braker}/braker/{params.species}/augustus.gff3 -o {output.merge_gff}
        """

rule createFasta:
    """
    This create fasta file from gff file
    """
    threads : 1
    input :
        gff = rules.merge_gff.output.merge_gff,
        fasta = rules.hisat2_index.output.new_reference_fasta
    output :
        fasta_directory = output_directory+'6_final_data/{smp}/'

    params :
        l_mem_free='4G'
    message :
        """
        Function : 
            - Create fasta file from gff file of {wildcards.smp}
        Input : 
            - gff file : : {input.gff}
            - fasta file : {input.fasta}
        Ouput : 
            - fasta directory  :{output.fasta_directory}
        """ + "*" *100
    shell :
        """
        script/gff2fasta.pl --gff {input.gff} --fasta {input.fasta} --prefix {output.fasta_directory}{wildcards.smp}
        cp {input.gff} {output.fasta_directory}
        script/renameFasta.py -d {output.fasta_directory} -s {wildcards.smp}
        """



rule recuperation_Stat:
    """
    This rule retrieve quality statistics from assembly and annotation
    """
    threads : 1
    input :
        assembly = data_directory,
        outdir = output_directory,
        lien = expand(output_directory+'5_merged_gff/{smp}_merge.gff3',smp = SAMPLES)

    output :
        assembly = output_directory+'7_report/data_report/Assembly_quality.csv',
        annotation = output_directory+'7_report/data_report/Annotation_stat.csv'
    params :
        l_mem_free='4G'
    message :
        """
        Function : 
            - Retrieve quality statistics from assembly and annotation
        Input : 
            - assembly directory : : {input.assembly}
            - annotation directory : {input.outdir}
        Ouput : 
            - result file   : 
                * {output.annotation}
                * {output.assembly}
        """ + "*" *100
    shell :
        """
        module purge
        script/QualityAssemblage.py -d {input.assembly} -o {output.assembly}
        script/RecupInfoGFF.py -d {input.outdir}4_mergeGFF/ -o {output.annotation} -g {input.assembly}
        """


rule report:
    """
    This rule generate rapport in html with annotation and assembly quality
    """
    threads : 1
    input:
        assembly = rules.recuperation_Stat.output.assembly,
        annotation = rules.recuperation_Stat.output.annotation

    output:
        rules.final.input.report
    params :
        l_mem_free='4G'
    message :
        """
        Function : 
            - Generate rapport in html with annotation and assembly quality of all samples
        Input : 
            - assembly quality file : : {input.assembly}
            - annotation quality file : {input.annotation}
        Ouput : 
            - fasta directory  :{output}
        """ + "*" *100
    shell :
        """
        module purge
        module load bioinfo/R/3.4.3
        Rscript -e 'rmarkdown::render("script/report.Rmd", output_file="{output}", quiet=TRUE, params = list(assembly = "{input.assembly}", Annotation = "{input.annotation}"))'
        """












